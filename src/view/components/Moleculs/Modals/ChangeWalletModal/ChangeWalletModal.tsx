import { Tooltip } from '@mui/material';import { ReactComponent as GarbageIcon } from 'assets/icons/garbage.svg';import { observer } from 'mobx-react-lite';import React, { useEffect, useState } from 'react';import { useTranslation } from 'react-i18next';import AuthStore from 'store/AuthStore/auth-store';import { WalletModelType } from 'store/Type/models';import WalletStore from 'store/WalletStore';import { useInput } from 'utils/utils';import BaseStore from '../../../../../store/BaseStore/base-store';import { CustomInput } from '../../../Atoms/CustomInput/CustomInput';import { CustomSelect } from '../../../Atoms/Select/CustomSelect';import { Title } from '../../../Atoms/Title/Title';import { ModalWrapper } from '../../ModalWrapper/ModalWrapper';import styles from './ChangeWalletModal.module.scss';type ChangeWalletModalType = {	closeCallback: (value: boolean) => void;	currentWallet: WalletModelType;};export const ChangeWalletModal = observer(	({ closeCallback, currentWallet }: ChangeWalletModalType): React.ReactElement => {		const [removeWalletModal, setRemoveWalletModal] = useState(false);		const { allCurrencyList, removeWallet, updateWallet, getCurrencyList } = WalletStore;		const { user } = AuthStore;		const { setNotification } = BaseStore;		const { t } = useTranslation();		const {			balance: currentBalance,			_id: idWallet,			name: currentName,			currency: currentCurrency,		} = currentWallet;		const name = useInput('', { isEmpty: true });		const balance = useInput('', { isEmpty: true });		const currency = useInput('', { isEmpty: true });		const saveInfoWallet = (): void => {			updateWallet(idWallet, {				...currentWallet,				name: name.value ? name.value : currentWallet.name,				balance: (balance.value as unknown as number)					? (balance.value as unknown as number)					: currentWallet.balance,				currency: currency.value ? currency.value : currentWallet.currency,			}).then((resp) => {				if (resp === 'ok') {					setNotification('success', true, t('THE_OPERATION_WAS_SUCCESSFUL'));					closeCallback(false);				} else {					setNotification('error', true, resp);				}			});		};		const removeWalletHandler = (): void => {			if (user?._id) {				removeWallet(user?._id, idWallet).then((resp) => {					if (resp === 'ok') {						setNotification('success', true, t('THE_OPERATION_WAS_SUCCESSFUL'));					} else {						setNotification('error', true, resp);					}				});			}		};		useEffect(() => {			getCurrencyList();		}, []);		return (			<ModalWrapper				callBackSave={saveInfoWallet}				closeCallback={(): void => closeCallback(false)}				textBtnDontSave={'NOT_SAVE'}				textBtnSave={'SAVE'}				disabledBtn={balance.valid.isEmpty && name.valid.isEmpty && currency.valid.isEmpty}			>				<div className={styles['change-wallet']}>					<div className={styles['change-wallet_header']}>						<Title size={'h1'}>{t('CHANGE_WALLET')}</Title>						<Tooltip title={t('DELETE_WALLET')}>							<GarbageIcon								className={styles['change-wallet_ico-remove']}								onClick={(): void => setRemoveWalletModal(true)}							/>						</Tooltip>					</div>					<div className={styles['change-wallet_input-block']}>						<span>							{t('CURRENT_NAME')}: <b>{currentName}</b>						</span>						<CustomInput							type={'text'}							placeholder={t('NAME_WALLET')}							value={name.value ?? ''}							onChange={(e): void => name.onChange(e)}						/>					</div>					<div className={styles['change-wallet_input-block']}>						<span>							{t('CURRENT_BALANCE')}: <b>{currentBalance}</b>						</span>						<CustomInput							type={'number'}							placeholder={t('BALANCE_FOR_WALLET')}							value={balance.value ?? ''}							onChange={(e): void => balance.onChange(e)}						/>					</div>					<div className={styles['change-wallet_input-block']}>						<span>							{t('CURRENT_CURRENCY')}: <b>{currentCurrency}</b>						</span>						<CustomSelect							onChange={(e): void => currency.onChange(e)}							value={currency.value ?? ''}							data={allCurrencyList ?? []}							placeholder={t('CURRENCY_SELECTION')}						/>					</div>					<div style={{ color: 'red' }}>Change the photo in development</div>				</div>				{removeWalletModal && (					<ModalWrapper						callBackSave={removeWalletHandler}						closeCallback={(): void => setRemoveWalletModal(false)}					>						<div>{t('DO_YOU_REALLY_WANT_DELETE_YOUR_WALLET')}</div>					</ModalWrapper>				)}			</ModalWrapper>		);	},);