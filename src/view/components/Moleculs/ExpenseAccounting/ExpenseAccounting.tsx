import { observer } from 'mobx-react-lite';import React from 'react';import { useTranslation } from 'react-i18next';import AuthStore from 'store/AuthStore';import CategoriesStore from 'store/CategoriesStore';import WalletStore from 'store/WalletStore';import { useInput } from 'utils/utils';import BaseStore from '../../../../store/BaseStore/base-store';import Button from '../../Atoms/Button/Button';import { CustomInput } from '../../Atoms/CustomInput/CustomInput';import { CustomSelect } from '../../Atoms/Select/CustomSelect';import { CustomTextArea } from '../../Atoms/TextArea/TextArea';import { Title } from '../../Atoms/Title/Title';import { WalletsSelect } from '../WalletsSelect/WalletsSelect';import styles from './ExpenseAccounting.module.scss';type ExpenseAccountingType = {	onClose?: (value: boolean) => void;	className?: string;};export const ExpenseAccounting = observer(	({ onClose, className }: ExpenseAccountingType): React.ReactElement => {		const { t } = useTranslation();		const { categories } = CategoriesStore;		const { addSpending, wallets } = WalletStore;		const { user } = AuthStore;		const { setNotification } = BaseStore;		const title = useInput('', { isEmpty: true });		const amount = useInput('', { isEmpty: true });		const walletId = useInput('', { isEmpty: true });		const description = useInput('', {});		const saveHandler = (): void => {			addSpending({				walletId: walletId.value ?? '',				userId: user._id,				spending: {					title: title.value ?? '',					description: description.value ?? '',					amount: amount.value ?? '',				},			}).then((resp) => {				if (resp === 'ok') {					setNotification('success', true, t('THE_OPERATION_WAS_SUCCESSFUL'));					title.setValue(null);					amount.setValue(null);					walletId.setValue(null);					description.setValue(null);					onClose && onClose(false);				} else {					setNotification('error', true, resp);				}			});		};		return (			<div className={styles['expense-accounting']}>				<div					className={`${styles['expense-accounting__wrapper']}${						className ? styles[className] : ''					}`}				>					<div className={styles['expense-accounting__body']}>						<Title title={t('WHERE_DID_YOU_MONEY_TODAY')} size={'h3'} />						<CustomSelect							data={categories}							label={t('CATEGORIES')}							value={title.value ?? ''}							error={title.isDirty && title.valid.isEmpty}							errorMessage={t('FIELD_IS_REQUIRED')}							onChange={(e): void => title.onChange(e)}							onBlur={(e): void => title.onBlur(e as unknown as FocusEvent)}						/>						<CustomInput							label={t('THE_AMOUNT_YOU_SPEND')}							type={'number'}							placeholder={'amount'}							value={amount.value ?? ''}							error={amount.isDirty && amount.valid.isEmpty}							errorMessage={t('FIELD_IS_REQUIRED')}							onChange={(e): void => amount.onChange(e)}							onBlur={(e): void => amount.onBlur(e as unknown as FocusEvent)}						/>						<div>							<WalletsSelect								label={t('WALLET_SELECTION')}								wallets={wallets}								onChange={(e): void => walletId.onChange(e)}								onBlur={(e): void => walletId.onBlur(e as unknown as FocusEvent)}								value={walletId.value ?? ''}								error={walletId.isDirty && walletId.valid.isEmpty}								errorMessage={t('FIELD_IS_REQUIRED')}							/>						</div>						<div className={styles['expense-accounting__body__wrapper']}>							<CustomTextArea								label={t('ADD_COMMENT')}								onChange={(e): void => description.onChange(e)}								onBlur={(e): void => description.onBlur(e as unknown as FocusEvent)}								value={description.value ?? ''}								name={'description'}							/>						</div>						<Button							disabled={								title.valid.isEmpty ||								amount.valid.isEmpty ||								walletId.valid.isEmpty ||								!title.value ||								!walletId.value ||								!amount.value							}							onClick={saveHandler}						>							{t('SAVE')}						</Button>					</div>				</div>			</div>		);	},);