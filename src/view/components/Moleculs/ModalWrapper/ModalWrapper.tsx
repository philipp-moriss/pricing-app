import React, { useEffect } from 'react';import ReactDOM from 'react-dom';import { useTranslation } from 'react-i18next';import Button from '../../Atoms/Button/Button';import styles from './ModalWrapper.module.scss';interface DisconnectAllModalPropsType {	closeCallback?: () => void;	callBackSave?: () => void;	children: React.ReactNode;	textBtnSave?: string;	textBtnDontSave?: string;	disabledBtn?: boolean;}export const ModalWrapper: React.FC<DisconnectAllModalPropsType> = ({	callBackSave,	closeCallback,	children,	textBtnSave,	textBtnDontSave,	disabledBtn,}) => {	const { t } = useTranslation();	useEffect(() => {		if (callBackSave) {			document.body.style.overflow = 'hidden';			return () => {				document.body.style.overflow = 'auto';			};		}	}, []);	const PortalNode = document.getElementById('portal');	return PortalNode		? ReactDOM.createPortal(				<div className={styles['modal-wrapper']}>					<div className={styles['modal-overflow']} onClick={closeCallback}></div>					<div className={styles['modal-inner']}>						<div className={styles['modal-content-container']}>{children}</div>						{callBackSave && (							<div className={styles['modal-content-button-box']}>								<Button									onClick={(): void => {										if (!disabledBtn) {											callBackSave();										}									}}									disabled={disabledBtn}								>									{textBtnSave ? t(textBtnSave) : t('YES')}								</Button>								<Button onClick={closeCallback}>									{textBtnDontSave ? t(textBtnDontSave) : t('NO')}								</Button>							</div>						)}					</div>				</div>,				PortalNode,		  )		: null;};