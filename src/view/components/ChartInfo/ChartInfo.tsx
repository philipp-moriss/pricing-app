import { Checkbox } from '@mui/material';import { SelectChangeEvent } from '@mui/material/Select/SelectInput';import { observer } from 'mobx-react-lite';import React from 'react';import { useTranslation } from 'react-i18next';import CategoriesStore from '../../../store/CategoriesStore/categories-store';import WalletStore from '../../../store/WalletStore/wallet-store';import { useInput } from '../../../utils/utils';import Button from '../Atoms/Button/Button';import { CustomSelect } from '../Atoms/Select/CustomSelect';import { Title } from '../Atoms/Title/Title';import { WalletsSelect } from '../Moleculs/WalletsSelect/WalletsSelect';import styles from './ChartInfo.module.scss';export const ChartInfo = observer((): React.ReactElement => {	const { categories, selectedСategories, setSelectedСategories, setWalletChartId } =		CategoriesStore;	const { wallets } = WalletStore;	const selectWalletHandler = (event: SelectChangeEvent<string>): void => {		setWalletChartId(event.target.value);	};	const { t } = useTranslation();	const dateSelect = useInput('', { isEmpty: true });	return (		<div className={styles['chart-info']}>			<div className={styles['chart-info__wrapper']}>				<div className={styles['chart-info__body']}>					{/*	<Title size={'h3'} title={'Выбор категорий для графика'} />					{categories.map((category) => {						const checkBoxHandler = (): void => {							setSelectedСategories(category.value);						};						return (							<div className={styles['chart-info__category_block']} key={category._id}>								<Checkbox onClick={checkBoxHandler} />								<span>{category.value}</span>							</div>						);					})}					<CustomSelect						data={[							{ _id: '1', value: '2022' },							{ _id: '2', value: '2021' },							{ _id: '3', value: '2020' },							{								_id: '4',								value: '2019',							},							{ _id: '5', value: '2018' },							{ _id: '6', value: '2017' },						]}						label={t('CATEGORIES')}						value={dateSelect.value ?? ''}						error={dateSelect.isDirty && dateSelect.valid.isEmpty}						errorMessage={t('FIELD_IS_REQUIRED')}						onChange={(e): void => dateSelect.onChange(e)}						className={styles['chart-info__date-select']}					/>*/}					<WalletsSelect						placeholder={t('WALLET_SELECTION')}						className={styles['chart-info__wallet-select']}						wallets={wallets}						label={t('WALLETS')}						onChange={selectWalletHandler}					/>					<Button>Update chart</Button>				</div>			</div>		</div>	);});