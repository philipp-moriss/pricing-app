import addImg from 'assets/images/add-circle.png';import { observer } from 'mobx-react-lite';import React, { useEffect, useState } from 'react';import { useTranslation } from 'react-i18next';import AuthStore from 'store/AuthStore';import BaseStore from 'store/BaseStore';import { LoadingType, NewWalletType } from 'store/Type/models';import WalletInstance from 'store/WalletStore/wallet-store';import { CustomInput } from 'view/components/UiComponent/CustomInput/CustomInput';import { ModalWrapper } from 'view/components/UiComponent/ModalWrapper/modal-wrapper';import { Title } from 'view/components/UiComponent/Title/Title';import { Wallet } from 'view/pages/Main/Wallet/Wallet/Wallet';import styles from './Wallets.module.scss';export const Wallets = observer((): React.ReactElement => {	const { wallets, getWallets } = WalletInstance;	const { setIsLoading } = BaseStore;	const { user } = AuthStore;	const [addWalletModal, setAddWalletModal] = useState(false);	const [newWallet, setNewWallet] = useState<NewWalletType>({		userId: user._id,		name: '',		balance: 0,		currency: '',	});	const { t } = useTranslation();	const addWallet = (): void => {		WalletInstance.addWallet(newWallet);		setAddWalletModal(false);		setNewWallet({			userId: user._id,			name: '',			balance: 0,			currency: '',		});	};	const addWalletHandler = (value: string | number, key: string): void => {		setNewWallet((prevState) => {			return {				...prevState,				[key]: value,			};		});	};	useEffect(() => {		getWallets(user._id).finally(() => {			setIsLoading(LoadingType.success);		});	}, []);	return (		<>			<div className={styles['wallets']}>				{wallets &&					wallets.map((i) => {						return (							<Wallet								key={i._id}								idWallet={i._id}								name={i.name}								balance={i.balance}								currency={i.currency}								totalSpends={i.totalSpends}							/>						);					})}				<img					className={styles['wallets__add-wallet-img']}					src={addImg}					onClick={(): void => setAddWalletModal(true)}				/>			</div>			{addWalletModal && (				<ModalWrapper callBackSave={addWallet} closeCallback={(): void => setAddWalletModal(false)}>					<Title size={'h1'}>Create new wallet</Title>					<CustomInput						type={'text'}						placeholder={'Name'}						value={newWallet?.name}						onChange={(e): void => addWalletHandler(e.currentTarget.value, 'name')}					/>					<CustomInput						type={'text'}						placeholder={'Currency'}						value={newWallet?.currency}						onChange={(e): void => addWalletHandler(e.currentTarget.value, 'currency')}					/>					<CustomInput						type={'text'}						placeholder={'Balance'}						value={newWallet?.balance}						onChange={(e): void => addWalletHandler(e.currentTarget.value, 'balance')}					/>				</ModalWrapper>			)}		</>	);});