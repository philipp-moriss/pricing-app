import addImg from 'assets/images/add-circle.png';import { observer } from 'mobx-react-lite';import React, { useEffect, useState } from 'react';import { useTranslation } from 'react-i18next';import AuthStore from 'store/AuthStore';import { NewWalletType } from 'store/Type/models';import WalletStore from 'store/WalletStore/wallet-store';import { CustomInput } from 'view/components/UiComponent/CustomInput/CustomInput';import { ModalWrapper } from 'view/components/UiComponent/ModalWrapper/modal-wrapper';import { Title } from 'view/components/UiComponent/Title/Title';import { Wallet } from 'view/pages/Main/Wallet/Wallet/Wallet';import styles from './Wallets.module.scss';export const Wallets = observer((): React.ReactElement => {	const { wallets, getWallets, addWallet } = WalletStore;	const { user } = AuthStore;	const [addWalletModal, setAddWalletModal] = useState(false);	const [newWallet, setNewWallet] = useState<NewWalletType>({		userId: user._id,		name: '',		balance: null as unknown as number,		currency: '',	});	const { t } = useTranslation();	const saveWallet = (): void => {		addWallet(newWallet);		setAddWalletModal(false);		setNewWallet({			userId: user._id,			name: '',			balance: null as unknown as number,			currency: '',		});	};	const addWalletHandler = (value: string | number, key: string): void => {		setNewWallet((prevState) => {			return {				...prevState,				[key]: value,			};		});	};	useEffect(() => {		getWallets(user._id);	}, []);	return (		<>			<div className={styles['wallets']}>				<img					className={styles['wallets__add-wallet-img']}					src={addImg}					onClick={(): void => setAddWalletModal(true)}				/>				{wallets &&					wallets.map((wallet) => {						return (							<Wallet								key={wallet._id}								idWallet={wallet._id}								name={wallet.name}								balance={wallet.balance}								currency={wallet.currency}								totalSpends={wallet.totalSpends}								createDate={wallet.createdAt}							/>						);					})}			</div>			{addWalletModal && (				<ModalWrapper					callBackSave={saveWallet}					closeCallback={(): void => setAddWalletModal(false)}				>					<div className={styles['wallets__wallet-modal']}>						<Title size={'h1'}>Create a new wallet</Title>						<CustomInput							type={'text'}							placeholder={'Name'}							value={newWallet?.name ?? ''}							onChange={(e): void => addWalletHandler(e.currentTarget.value, 'name')}						/>						<CustomInput							type={'text'}							placeholder={'Currency'}							value={newWallet?.currency ?? ''}							onChange={(e): void => addWalletHandler(e.currentTarget.value, 'currency')}						/>						<CustomInput							type={'text'}							placeholder={'Balance'}							value={newWallet?.balance ?? ''}							onChange={(e): void => addWalletHandler(e.currentTarget.value, 'balance')}						/>					</div>				</ModalWrapper>			)}		</>	);});