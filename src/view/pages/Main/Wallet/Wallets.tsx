import addImg from 'assets/images/add-circle.png';import { observer } from 'mobx-react-lite';import React, { useEffect, useState } from 'react';import { useTranslation } from 'react-i18next';import AuthStore from 'store/AuthStore';import { NewWalletType } from 'store/Type/models';import WalletStore from 'store/WalletStore/wallet-store';import { useInput } from 'utils/utils';import { CustomInput } from 'view/components/UiComponent/CustomInput/CustomInput';import { ModalWrapper } from 'view/components/UiComponent/ModalWrapper/modal-wrapper';import { Select } from 'view/components/UiComponent/Select/Select';import { Title } from 'view/components/UiComponent/Title/Title';import { Wallet } from 'view/pages/Main/Wallet/Wallet/Wallet';import { useResizeWindow } from '../../../../utils/hooks/useCustomNav';import { ExpenseAccounting } from '../WorkSpace/ExpenseAccounting/ExpenseAccounting';import styles from './Wallets.module.scss';export const Wallets = observer((): React.ReactElement => {	const size = useResizeWindow();	const hiddenSpendingMenu = size.width < 914;	const { wallets, getWallets, addWallet, getCurrencyList, allCurrencyList } = WalletStore;	const { user } = AuthStore;	const [addWalletModal, setAddWalletModal] = useState(false);	const { t } = useTranslation();	const name = useInput('', { isEmpty: true });	const balance = useInput('', { isEmpty: true });	const currency = useInput('', { isEmpty: true });	const saveWallet = (): void => {		addWallet({			userId: user._id,			name: name.value,			balance: +balance.value,			currency: currency.value,		}).then(() => {			getWallets(user._id);		});		setAddWalletModal(false);	};	useEffect(() => {		getWallets(user._id);	}, []);	useEffect(() => {		if (!allCurrencyList && addWalletModal) {			getCurrencyList();		}	}, [addWalletModal]);	return (		<>			<div className={styles['wallets']}>				<img					className={styles['wallets__add-wallet-img']}					src={addImg}					onClick={(): void => setAddWalletModal(true)}				/>				<div className={styles['wallets__wallet-section']}>					{wallets &&						wallets.map((wallet) => {							return (								<Wallet									key={wallet._id}									idWallet={wallet._id}									name={wallet.name}									balance={wallet.balance}									currency={wallet.currency}									totalSpends={wallet.totalSpends}									createDate={wallet.createdAt}								/>							);						})}				</div>				{!hiddenSpendingMenu && !!wallets?.length && <ExpenseAccounting />}			</div>			{addWalletModal && (				<ModalWrapper					callBackSave={saveWallet}					closeCallback={(): void => setAddWalletModal(false)}					textBtnDontSave={'Not save'}					textBtnSave={'Save'}					disabledBtn={balance.valid.isEmpty || name.valid.isEmpty || currency.valid.isEmpty}				>					<div className={styles['wallets__wallet-modal']}>						<Title size={'h1'}>{t('CREATE_A_NEW_WALLET')}</Title>						<CustomInput							type={'text'}							placeholder={'Name wallet'}							value={name.value}							error={name.isDirty && name.valid.isEmpty}							errorMessage={t('FIELD_IS_REQUIRED')}							onChange={(e): void => name.onChange(e)}							onBlur={(e): void => name.onBlur(e as unknown as FocusEvent)}						/>						<CustomInput							type={'text'}							placeholder={'Balance for wallet'}							value={balance.value}							error={balance.isDirty && balance.valid.isEmpty}							errorMessage={t('FIELD_IS_REQUIRED')}							onChange={(e): void => balance.onChange(e)}							onBlur={(e): void => balance.onBlur(e as unknown as FocusEvent)}						/>						<Select							onChange={(e): void => currency.onChange(e)}							onBlur={(e): void => currency.onBlur(e as unknown as FocusEvent)}							value={currency.value}							options={allCurrencyList ?? []}							error={currency.isDirty && currency.valid.isEmpty}							placeholder={'Currency selection'}						/>					</div>				</ModalWrapper>			)}		</>	);});