import { action, makeAutoObservable, makeObservable, observable } from 'mobx';import { CategoryType } from 'store/Type/models';import { v1 } from 'uuid';export class CategoriesStore {	categories: CategoryType[] = [		{ _id: v1(), value: 'Food Store' },		{ _id: v1(), value: 'Clothing Shop' },		{ _id: v1(), value: 'Communal services' },		{ _id: v1(), value: 'Entertainment' },		{ _id: v1(), value: 'Auto services' },		{ _id: v1(), value: 'Gifts' },		{ _id: v1(), value: 'Cigarettes and alcohol' },		{ _id: v1(), value: 'Other' },	];	selectedСategories: string[] = [];	constructor() {		makeObservable(this, {			selectedСategories: observable,			setSelectedСategories: action,		});		this.setSelectedСategories = this.setSelectedСategories.bind(this);	}	setSelectedСategories(newCategory: string): void {		const checkRepeatSelectedCategories = this.selectedСategories.find(			(category) => category === newCategory,		);		if (checkRepeatSelectedCategories) {			this.selectedСategories = this.selectedСategories.filter(				(category) => category !== checkRepeatSelectedCategories,			);		} else {			this.selectedСategories = [...this.selectedСategories, newCategory];		}	}	addСategory(category: CategoryType): void {		this.categories.push(category);		return;	}	removeСategory(idCategory: string): void {		const currentCategory = this.categories.findIndex((category) => category._id === idCategory);		this.categories.splice(currentCategory, 1);		return;	}	changeСategory(currentCategory: CategoryType): void {		this.categories.find((category) => {			if (category._id === currentCategory._id) {				category.value = currentCategory.value;			}		});		return;	}	setСategory(categories: CategoryType[]): void {		this.categories = categories;		return;	}}export default new CategoriesStore();