import { makeAutoObservable } from 'mobx';import { CategoryType } from 'store/Type/models';import { v1 } from 'uuid';export class CategoriesStore {	categories: CategoryType[] = [		{ _id: v1(), value: 'Food Store' },		{ _id: v1(), value: 'Clothing Shop' },		{ _id: v1(), value: 'Communal services' },		{ _id: v1(), value: 'Entertainment' },		{ _id: v1(), value: 'Auto services' },		{ _id: v1(), value: 'Gifts' },		{ _id: v1(), value: 'Cigarettes and alcohol' },		{ _id: v1(), value: 'Other' },	];	constructor() {		makeAutoObservable(this);	}	add小ategory(category: CategoryType): void {		this.categories.push(category);		return;	}	remove小ategory(idCategory: string): void {		const currentCategory = this.categories.findIndex((category) => category._id === idCategory);		this.categories.splice(currentCategory, 1);		return;	}	change小ategory(currentCategory: CategoryType): void {		this.categories.find((category) => {			if (category._id === currentCategory._id) {				category.value = currentCategory.value;			}		});		return;	}	set小ategory(categories: CategoryType[]): void {		this.categories = categories;		return;	}}export default new CategoriesStore();