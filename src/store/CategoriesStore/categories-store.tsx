import { action, makeObservable, observable } from 'mobx';import { CategoryType, SpendDataType, SpendingModel } from 'store/Type/models';import { v1 } from 'uuid';import { WalletStore } from '../WalletStore';export class CategoriesStore extends WalletStore {	categories: CategoryType[] = [		{ _id: v1(), value: 'Food Store' },		{ _id: v1(), value: 'Clothing Shop' },		{ _id: v1(), value: 'Communal services' },		{ _id: v1(), value: 'Entertainment' },		{ _id: v1(), value: 'Auto services' },		{ _id: v1(), value: 'Gifts' },		{ _id: v1(), value: 'Cigarettes and alcohol' },		{ _id: v1(), value: 'Other' },	];	selectedСategories: string[] = [];	walletChartId: string | undefined = '';	chartData = {		labels: ['Red', 'Blue'],		datasets: [			{				label: 'Graphic',				data: [100, 10],				backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)'],				hoverOffset: 4,			},		],	};	constructor() {		super();		makeObservable(this, {			selectedСategories: observable,			walletChartId: observable,			setWalletChartId: action,			setSelectedСategories: action,			transformationDataToChart: action,		});		this.setSelectedСategories = this.setSelectedСategories.bind(this);		this.setWalletChartId = this.setWalletChartId.bind(this);	}	setSelectedСategories(newCategory: string): void {		const checkRepeatSelectedCategories = this.selectedСategories.find(			(category) => category === newCategory,		);		if (checkRepeatSelectedCategories) {			this.selectedСategories = this.selectedСategories.filter(				(category) => category !== checkRepeatSelectedCategories,			);		} else {			this.selectedСategories = [...this.selectedСategories, newCategory];		}	}	transformationDataToChart(data: SpendingModel[]): void {		const sortList = data.sort((a, b) => (b.title > a.title ? -1 : 1));		const holder: { [key: string]: number } = {};		sortList.forEach((spend) => {			// eslint-disable-next-line no-prototype-builtins			if (holder.hasOwnProperty(spend.title)) {				holder[spend.title] = holder[spend.title] + spend.amount;			} else {				holder[spend.title] = spend.amount;			}		});		console.log(holder);		const totalAmountCategories = [];		for (const prop in holder) {			totalAmountCategories.push({ name: prop, value: holder[prop] });		}		console.log(totalAmountCategories);	}	async setWalletChartId(idWallet: string): Promise<void> {		this.walletChartId = idWallet;		try {			const allSpendCurrentWallet = await this.getCurrentHistory(idWallet);			this.transformationDataToChart(allSpendCurrentWallet);		} catch (e) {			console.log(e);		}		return;	}	addСategory(category: CategoryType): void {		this.categories.push(category);		return;	}	removeСategory(idCategory: string): void {		const currentCategory = this.categories.findIndex((category) => category._id === idCategory);		this.categories.splice(currentCategory, 1);		return;	}	changeСategory(currentCategory: CategoryType): void {		this.categories.find((category) => {			if (category._id === currentCategory._id) {				category.value = currentCategory.value;			}		});		return;	}	setСategory(categories: CategoryType[]): void {		this.categories = categories;		return;	}}export default new CategoriesStore();