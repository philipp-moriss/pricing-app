import { action, makeObservable, observable } from 'mobx';import { historyApi, walletApi } from '../../api/api';import { convertToDate } from '../../utils/utils';import { CurrencyType, SpendingModel } from '../Type/models';export class HistoryStore {	selectedWalletHistory: SpendingModel[] | undefined;	allCurrencyList: CurrencyType[] | undefined;	/*	clearSelectedWalletHistory(): void {            this.selectedWalletHistory = [] as SpendingModel[];            return;        }*/	sortSelectedWalletHistory(sortField: string, isUpDirection: boolean): void {		this.selectedWalletHistory = this.selectedWalletHistory?.sort((a, b) => {			if (sortField === 'category') {				if (a.title?.toLowerCase() > b.title?.toLowerCase()) {					return isUpDirection ? -1 : 1;				}				return isUpDirection ? 1 : -1;			}			if (sortField === 'amount') {				if (a.amount > b.amount) {					return isUpDirection ? -1 : 1;				}				return isUpDirection ? 1 : -1;			}			if (sortField === 'date') {				if (convertToDate(a.createdAt) > convertToDate(b.createdAt)) {					return isUpDirection ? -1 : 1;				}				return isUpDirection ? 1 : -1;			}			return 0;		});		return;	}	async getCurrencyList(): Promise<void> {		const { data } = await walletApi.getCurrencyList();		this.allCurrencyList = data;	}	async getCurrentHistory(walletId: string): Promise<any> {		const { data } = await historyApi.getCurrentHistory(walletId);		this.selectedWalletHistory = data;		return data;	}	async getAllHistory(): Promise<void> {		const { data } = await historyApi.getAllHistory();		this.selectedWalletHistory = data;	}	constructor() {		makeObservable(this, {			selectedWalletHistory: observable,			allCurrencyList: observable,			getCurrentHistory: action,			sortSelectedWalletHistory: action,			getCurrencyList: action,			getAllHistory: action,		});		this.getCurrentHistory = this.getCurrentHistory.bind(this);		this.getCurrencyList = this.getCurrencyList.bind(this);		this.sortSelectedWalletHistory = this.sortSelectedWalletHistory.bind(this);		this.getAllHistory = this.getAllHistory.bind(this);	}}export default new HistoryStore();